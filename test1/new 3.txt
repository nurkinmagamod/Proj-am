if (touchableVol == "Detector2") {
				int index2 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index2 >= 0 && index2 < NOBINS){
    		 			histogram2[index2]++;
					}
				}
				if (touchableVol == "Detector3") {
				int index3 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index3 >= 0 && index3 < NOBINS){
    		 			histogram3[index3]++;
					}
				}
				if (touchableVol == "Detector4") {
				int index4 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index4 >= 0 && index4 < NOBINS){
    		 			histogram4[index4]++;
					}
				}
				if (touchableVol == "Detector5") {
				int index5 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index5 >= 0 && index5 < NOBINS){
    		 			histogram5[index5]++;
					}
				}
				if (touchableVol == "Detector6") {
				int index6 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index6 >= 0 && index6 < NOBINS){
    		 			histogram6[index6]++;
					}
				}
				if (touchableVol == "Detector7") {
				int index7 = int(floor((energy-HIST_MIN)/bin_width));
   		  		 	if(index7 >= 0 && index7 < NOBINS){
    		 			histogram7[index7]++;
					}
				}
				//if (touchableVol == "Detector8") {
				//int index8 = int(floor((energy-HIST_MIN)/bin_width));
   		  		// 	if(index8 >= 0 && index8 < NOBINS){
    		 	//		histogram8[index8]++;
				//	}
				//}
			//int index0 = int(floor((energy-HIST_MIN)/bin_width));
   		   	//if(index0 >= 0 && index0 < NOBINS){
    		// histogram0[index0]++;
			//}
			
			
			
			
			file.open("det1.dat", std::ios::trunc);
    for(int i = 0; i<NOBINS; i++)
    {
        double energy1 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy1/MeV << " "
             << std::setw(15) << histogram1[i] << std::endl;
   }
	file.close();
	
	file.open("det2.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy2 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy2/MeV << " "
             << std::setw(15) << histogram2[i] << std::endl;
   }
	file.close();
	
	file.open("det3.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy3 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy3/MeV << " "
             << std::setw(15) << histogram3[i] << std::endl;
   }
	file.close();
	
	file.open("det4.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy4 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy4/MeV << " "
             << std::setw(15) << histogram4[i] << std::endl;
   }
	file.close();
	
	file.open("det5.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy5 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy5/MeV << " "
             << std::setw(15) << histogram5[i] << std::endl;
   }
	file.close();
	
	file.open("det6.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy6 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy6/MeV << " "
             << std::setw(15) << histogram6[i] << std::endl;
   }
	file.close();
	
	file.open("det7.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy7 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy7/MeV << " "
             << std::setw(15) << histogram7[i] << std::endl;
   }
	file.close();
	
	file.open("det8.dat");
    for(int i = 0; i<NOBINS; i++)
    {
        double energy8 = i*bin_width + HIST_MIN;
        file << std::setw(15) << energy8/MeV << " "
             << std::setw(15) << histogram8[i] << std::endl;
   }
	file.close();
	